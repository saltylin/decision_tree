import java.io.*;
import java.util.Scanner;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;

public class DataProcess {

    public DataProcess(String filePath) {
        Scanner s = null;
        try {
            s = new Scanner(new FileInputStream(new File(filePath)));
        } catch(IOException e) {
            e.printStackTrace();
        }
        String[] str = s.nextLine().split(",");
        featureNum = str.length;
        featureType = new int[featureNum];
        for (int i = 0; i != featureNum; ++i) {
            featureType[i] = str[i].equals("1")? 1 : 0;
        }
        List<Double[]> rawFeatureList = new ArrayList<Double[]>();
        List<Integer> rawLabel = new ArrayList<Integer>();
        while (s.hasNextLine()) {
            str=s.nextLine().split(",");
            Double[] f = new Double[featureNum];
            for (int i = 0;i != featureNum; ++i) {
                f[i] = Double.valueOf(str[i]);
            }
            if (str[featureNum].equals("1.0") || str[featureNum].equals("1")) {
                rawLabel.add(1);    
            } else {
                rawLabel.add(-1);
            }
            rawFeatureList.add(f);
        }
        s.close();
        instanceNum = rawLabel.size();
        label = new int[instanceNum];
        for (int i = 0; i != instanceNum; ++i) {
            label[i] = rawLabel.get(i);
        }
        rawFeature = new double[instanceNum][];
        for (int i = 0; i!= instanceNum; ++i) {
            Double[] tmp = rawFeatureList.get(i);
            rawFeature[i] = new double[featureNum];
            for (int j = 0; j != featureNum; ++j) {
                rawFeature[i][j] = tmp[j];
            }
        }
        initDataset();
    }

    public int[][] getDataset(){
        return dataset;
    }
    
    public int[] getLabel(){
        return label;
    }

    private void cluster() {
        
    }

    private void singleCluster(List<Integer> idList, int start) {
        int[] clusterId = new int[clusterNum];
        for (int i = 0; i != clusterNum; ++i) {
            clusterId[i] = i + start;
        }

    }

    private void calCateFreq(List<Integer> idList) {
        
    }

    private void normalize(List<Integer> idList) {
        for (int i = 0; i != featureNum; ++i) {
            if (featureType[i] == 1) {
                continue;
            }
            double avg = 0.0;
            for (int id: idList) {
                avg += normalFeature[id][i];
            }
            avg /= idList.size();
            double dev = 0.0;
            for (int id: idList) {
                normalFeature[id][i] -= avg;
                double tmp = normalFeature[id][i];
                dev += tmp * tmp;
            }
            dev /= idList.size();
            dev = Math.sqrt(dev);
            for (int id: idList) {
                normalFeature[id][i] /= dev;
            }
        }
    }

    private Map<Integer, List<Integer>> getLabelMap() {
        Map<Integer, List<Integer>> result = new HashMap<Integer, List<Integer>>();
        for (int i = 0; i != label.length; ++i) {
            int c = label[i];
            if (!result.containsKey(c)) {
                List<Integer> idList = new ArrayList<Integer>();
                idList.add(i);
                result.put(c, idList);
            } else {
                result.get(c).add(i);
            }
        }
        return result;
    }

    private void initDataset(){
        int intervalNum = (int)(Math.log(instanceNum) / Math.log(2));
        dataset = new int[instanceNum][];
        for (int i = 0; i != instanceNum; ++i) {
            dataset[i] = new int[featureNum];
        }
        for (int i = 0; i != featureNum; ++i) {
            if (featureType[i] == 1) {
                for (int j = 0; j != instanceNum; ++j) {
                    dataset[j][i] = (int)rawFeature[j][i];
                }
            } else {
                double[] value = new double[instanceNum];
                for(int j = 0; j != instanceNum; ++j){
                    value[j] = rawFeature[j][i];
                }
                Arrays.sort(value);
                List<Double> th = new ArrayList<Double>();
                th.add(-Double.MAX_VALUE);
                for (int j = intervalNum-1; j < instanceNum; j += intervalNum) {
                    th.add(value[j]);
                }
                th.add(Double.MAX_VALUE);
                for (int j = 0; j != instanceNum; ++j) {
                    for (int k = 0; k < th.size() - 1; ++k) {
                        if (rawFeature[j][i] > th.get(k) && rawFeature[j][i] <= th.get(k + 1)) {
                            dataset[j][i] = k;
                            break;
                        }
                    }
                }
            }
        }
    }

    private double[][] rawFeature;
    private double[][] normalFeature;
    private int[][] dataset;
    private int[] label;
    private int featureNum;
    private int instanceNum;
    private int[] featureType;
    private Map<Integer, Integer> clusterMap = new HashMap<Integer, Integer>();
    private Map<Integer, Map<Integer, Double>> valueFreqMap = new HashMap<Integer, Map<Integer, Double>>();
    private int[] clusterLabel;
    private static int clusterNum = 5;

}
